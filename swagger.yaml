/**
 * @swagger
 * tags:
 *   name: Users
 *   description: API for managing users
 * /users:
 *   get:
 *     summary: Get all users
 *     tags: [Users]
 *     responses:
 *       200:
 *         description: List of users
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Users'
 *   post:
 *     summary: Create a new user
 *     tags: [Users]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Users'
 *     responses:
 *       200:
 *         description: The created user.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Users'
 *       500:
 *         description: Some server error
 * /users/{userId}:
 *   get:
 *     summary: Get user by ID
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: userId
 *         schema:
 *           type: integer
 *         required: true
 *         description: The user ID
 *     responses:
 *       200:
 *         description: The user response by ID
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Users'
 *       404:
 *         description: The user was not found
 *   put:
 *     summary: Update user by ID
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: userId
 *         schema:
 *           type: integer
 *         required: true
 *         description: The user ID
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Users'
 *     responses:
 *       200:
 *         description: The user was updated
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Users'
 *       404:
 *         description: The user was not found
 *       500:
 *         description: Some error happened
 * /login:
 *   post:
 *     summary: User login
 *     tags: [Users]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Login'
 *     responses:
 *       200:
 *         description: Sign in successful
 *       401:
 *         description: Invalid username or password
 *       500:
 *         description: Internal server error
 * /register:
 *   post:
 *     summary: Register a new user
 *     tags: [Users]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Register'
 *     responses:
 *       200:
 *         description: User created successfully
 *       409:
 *         description: Email already exists
 *       500:
 *         description: Internal server error
 * /profile/{userId}:
 *   get:
 *     summary: Get user profile by ID
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: userId
 *         schema:
 *           type: integer
 *         required: true
 *         description: The user ID
 *     responses:
 *       200:
 *         description: The user profile by ID
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Users'
 *       404:
 *         description: The user was not found
 * /logout:
 *   get:
 *     summary: User logout
 *     tags: [Users]
 *     responses:
 *       200:
 *         description: User logged out
 *       500:
 *         description: Some error happened
 * /aboutus:
 *   get:
 *     summary: Get all about us data
 *     tags: [Users]
 *     responses:
 *       200:
 *         description: List of about us data
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/About_us'
 * /mentors:
 *   get:
 *     summary: Get all mentors
 *     tags: [Users]
 *     responses:
 *       200:
 *         description: List of mentors
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Mentors'
 *   post:
 *     summary: Create a new mentor
 *     tags: [Users]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Mentors'
 *     responses:
 *       200:
 *         description: The created mentor.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Mentors'
 * /mentors/{mentorId}:
 *   get:
 *     summary: Get mentor by ID
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: mentorId
 *         schema:
 *           type: integer
 *         required: true
 *         description: The mentor ID
 *     responses:
 *       200:
 *         description: The mentor response by ID
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Mentors'
 *       404:
 *         description: The mentor was not found
 *   put:
 *     summary: Update mentor by ID
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: mentorId
 *         schema:
 *           type: integer
 *         required: true
 *         description: The mentor ID
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Mentors'
 *     responses:
 *       200:
 *         description: The mentor was updated
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Mentors'
 *       404:
 *         description: The mentor was not found
 *       500:
 *         description: Some error happened
 * /mentees:
 *   get:
 *     summary: Get all mentees
 *     tags: [Users]
 *     responses:
 *       200:
 *         description: List of mentees
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Mentees'
 *   post:
 *     summary: Create a new mentee
 *     tags: [Users]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Mentees'
 *     responses:
 *       200:
 *         description: The created mentee.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Mentees'
 * /mentees/{menteeId}:
 *   get:
 *     summary: Get mentee by ID
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: menteeId
 *         schema:
 *           type: integer
 *         required: true
 *         description: The mentee ID
 *     responses:
 *       200:
 *         description: The mentee response by ID
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Mentees'
 *       404:
 *         description: The mentee was not found
 *   put:
 *     summary: Update mentee by ID
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: menteeId
 *         schema:
 *           type: integer
 *         required: true
 *         description: The mentee ID
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Mentees'
 *     responses:
 *       200:
 *         description: The mentee was updated
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Mentees'
 *       404:
 *         description: The mentee was not found
 *       500:
 *         description: Some error happened
 * /qrcode:
 *   get:
 *     summary: Get all QR codes
 *     tags: [Users]
 *     responses:
 *       200:
 *         description: List of QR codes
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/QR_Table'
 * /request_form:
 *   get:
 *     summary: Get all request forms
 *     tags: [Users]
 *     responses:
 *       200:
 *         description: List of request forms
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Request_Tables'
 */

/**
 * @swagger
 * components:
 *   schemas:
 *     About_us:
 *       type: object
 *       properties:
 *         id:
 *           type: integer
 *         content:
 *           type: string
 *     Lets_talks:
 *       type: object
 *       properties:
 *         id:
 *           type: integer
 *         content:
 *           type: string
 *     Mentees:
 *       type: object
 *       properties:
 *         id:
 *           type: integer
 *         user_id:
 *           type: integer
 *         name:
 *           type: string
 *         student_type:
 *           type: string
 *         preferred_profession:
 *           type: string
 *         preferred_management:
 *           type: string
 *         preferred_counselor:
 *           type: string
 *         gender:
 *           type: string
 *         same_gender:
 *           type: boolean
 *         linkedin_url:
 *           type: string
 *         photo_url:
 *           type: string
 *     Mentors:
 *       type: object
 *       properties:
 *         id:
 *           type: integer
 *         user_id:
 *           type: integer
 *         name:
 *           type: string
 *         profession:
 *           type: string
 *         gender:
 *           type: string
 *         management:
 *           type: boolean
 *         counselor:
 *           type: string
 *         same_gender:
 *           type: boolean
 *         linkedin_url:
 *           type: string
 *         photo_url:
 *           type: string
 *     QR_Table:
 *       type: object
 *       properties:
 *         id:
 *           type: integer
 *         content:
 *           type: string
 *     Request_Tables:
 *       type: object
 *       properties:
 *         id:
 *           type: integer
 *         mentee_id:
 *           type: integer
 *         mentor_id:
 *           type: integer
 *         status:
 *           type: string
 *     Users:
 *       type: object
 *       properties:
 *         id:
 *           type: integer
 *         name:
 *           type: string
 *         email:
 *           type: string
 *         password:
 *           type: string
 *         role:
 *           type: string
 *     Login:
 *       type: object
 *       properties:
 *         email:
 *           type: string
 *         password:
 *           type: string
 *     Register:
 *       type: object
 *       properties:
 *         name:
 *           type: string
 *         email:
 *           type: string
 *         password:
 *           type: string
 *         role:
 *           type: string
 */
